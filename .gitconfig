# vim: st=2:ts=2:et

[core]
  excludesfile = ~/.gitignore-global
  quotepath = false

[user]
  name  = gmarik
  email = gmarik@gmail.com

[init]
  templatedir = ~/.gitfiles/templates/

[push]
  default = current

[commit]
  template = ~/.gitfiles/COMMIT_EDITMSG

[color]
  branch = auto
  diff = auto
  status = auto
  grep = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[log]
  date = relative

; [apply]
;   whitespace = fix

[diff]
  tool = vimdiff

[mergetool "mvimdiff"]
  cmd="/Applications/MacVim.app/Contents/MacOS/Vim -d -g -c 'wincmd J'  $MERGED $LOCAL $BASE $REMOTE"
  keepbackup=false

[alias]

  # Adding
  a     = add
  ae    = add --edit
  ai    = add --interactive
  ap    = add --patch
  au    = add --update

  # Branching
  b     = branch
  bls   = branch -v # list branches with last commit in
  brm   = branch -d # remove if branch-to-be-removed if fully merged into HEAD
  brmf  = branch -D # force removal
  # bt - branch track configures current branch to "track" same name from origin or specified remote
  bt    = "!f() { B=$(git symbolic-ref HEAD|cut -f3 -d/) && git config branch.$B.remote ${1:-origin} && git config branch.$B.merge refs/heads/$B; }; f"
  bmv   = branch -m

  # Config
  cg    = config --global
  clg   = config --global --list
  c     = config 
  cl    = config --list
  ce    = config --edit
  ceg   = config --global --edit

  # Checkout
  co    = checkout
  cp    = checkout - # previous one
  cob   = checkout -b
  com   = "!f() { git fetch; git checkout -b master origin/master; }; f"
  cot   = "!f() { git fetch; git checkout -b ${1##*/} $1; }; f " 
  con   = "!f() { git fetch; git checkout -b $1 origin/master }; f "

  # Add and Commit
  ca    = "!f() { git add $1; git ci -v $1; }; f"

  # Commit
  cia   = commit -a -e -C HEAD -v --reset-author --untracked-files=no
  ci    = commit    -e -C HEAD -v --reset-author --untracked-files=no

  ciab  = !B=$(git symbolic-ref HEAD 2>/dev/null) && git commit -v -a --edit -m "${B##refs/heads/}:" --untracked-files=no
  cii   = commit --interactive
  
  cid   = commit --amend -v                                            # edit last commit's message
  cim   = commit -m
  cip   = commit -am 'WIP!'

  chp   = cherry-pick 

  ctags = "!.git/hooks/ctags"

  # Diff
  d     = diff
  dc    = diff --cached
  du    = diff @{upstream}
  ds    = diff --stat=120,130 -M -C 
  dy    = diff --summary -M -C

  # Edit files
  em    = "!${EDITOR:-vim} $(git ls-files --modified)"
  ea    = "!${EDITOR:-vim} $(git status --short --porcelain|cut -f2 -d' ')"

  # Grep
  g    = "!git --no-pager grep --color --ignore-case -n"

  # GitK
  k     = "!gitk &"

  # Log
  l     = log
  ls    = log --stat=120,130
  lp    = log --patch -m -c # show merges and compressed diff format
  lpw   = log --patch --word-diff
  ll    = log  --abbrev-commit --pretty=tformat:'%C(yellow)%h%Creset %s %Cgreen(%cr) %C(bold blue) %an %Creset%C(red)%d%Creset'
  l1    = !"git --no-pager ll -10"
  lg    = !git ll --graph
  lu    = log @{upstream}.. --stat --no-merges
  llu    = !git ll @{upstream}..

  # Push
  po    = push origin HEAD

  # Pull
  pu    = pull
  pr    = pull --rebase

  # Rebase
  r     = rebase
  ra    = rebase --abort
  rc    = rebase --continue
  ri    = rebase --interactive
  ru    = rebase --onto @{upstream}

  # interactive rebase mostly for squashing/rearranging commits
  # operates on last 2 if not specified otherwise
  rih   = "!f() { git rebase -i HEAD~${1:-'2'}; }; f "

  # Reset
  rst   = reset
  # reset to @{upstream} with confirmation
  roh   = "! git --no-pager ll -10 @{upstream} && read -p '^C to stop, anykey to continue' Z && git rst --hard @{upstream}"

  # reset to prev commit
  # used mostly to reset WIP commits(used as stash)
  rl   = reset @{1}

  # Status
  # don't show untracked files
  st    = status --short --branch --untracked-files=no 
  # show all
  sta   = status --short --branch --untracked-files=normal 

  # Svn
  sv    = svn
  svci  = svn dcommit --no-rebase
  svr   = svn rebase

  # sync
  sy     = !git pull --rebase && git push

  sw    = update-index  --skip-worktree 
  nosw  = update-index --no-skip-worktree

  ta    = tag -a

  # Merge Tool
  mt    = "! [ -f /Applications/MacVim.app/Contents/MacOS/Vim ] && git mergetool -t mvimdiff || git mergetool -t vimdiff"

  # Show current `"user" <em@a.il>` configured
  w     = "! echo \"$(git config user.name) <$(git config user.email)> \"" 

  # me2 == "merge to" merge current branch to named one.
  # does 3 operations in one shot unless merge conflicts
  me2   = "!f() { git checkout $1 && git pull && git merge -; }; f "

  # codereview
  # http://gitready.com/advanced/2011/10/21/ribbon-and-catchup-reading-new-commits.html
  ribbon = tag --force _ribbon origin/master
  catchup = log --patch --reverse --topo-order _ribbon..origin/master

  scrum = "!git ll --since='yesterday' --author=\"`git config user.name`\""

  #  ticket = "!f() { git checkout -b `echo $1|tr 'A-Z' 'a-z'` origin/master }; f "
  #
  # xargs
  # run command on modified files
  x = "!f() { git status --short --untracked-files=no | cut -d' ' -f3 | xargs $1; }; f"


# read from given uri
# push to writable one
# http://bit.ly/g9c9Y2

[url "http://github.com/"]
  insteadOf = "gh:"

[url "git@github.com:"]
  pushInsteadOf = "https://github.com/"
  pushInsteadOf = "http://github.com/"
  pushInsteadOf = "gh:"

[url "git@github.com:gmarik/"]
  pushInsteadOf = "gm:"
[url "http://github.com/gmarik/"]
  insteadOf = "gm:"

[url "https://gist.github.com/"]
  insteadOf = "gist:"
[url "git@gist.github.com:"]
  pushInsteadOf = "https://gist.github.com/"
  pushInsteadOf = "http://gist.github.com/"
  pushInsteadOf = "gist:"

[url "git@heroku.com:"]
  insteadOf = "heroku:"

[url "git@bitbucket.org:gmarik/"]
  insteadOf = "bbm:"

[url "~/Dropbox/.gitrepos/"]
  insteadOf = "dx:"
