# vim: st=2:ts=2:et

[core]
  excludesfile = ~/.gitignore-global
  quotepath = false

[user]
  name  = gmarik
  email = gmarik@gmail.com

[init]
  templatedir = ~/.gitfiles/templates/

[push]
  default = current

[commit]
  template = ~/.gitfiles/COMMIT_EDITMSG

[color]
  branch = auto
  diff = auto
  status = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[log]
  date = relative

; [apply]
;   whitespace = fix

[diff]
  tool = vimdiff

[mergetool "mvimdiff"]
  cmd="/Applications/MacVim.app/Contents/MacOS/Vim -d -g -c 'wincmd J'  $MERGED $LOCAL $BASE $REMOTE"
  keepbackup=false

[alias]
  a     = add
  ae    = add --edit
  ai    = add --interactive
  ap    = add --patch
  au    = add --update
  b     = branch
  bls   = branch -v # list branches with last commit in
  brm   = branch -d # remove if branch-to-be-removed if fully merged into HEAD
  brmf  = branch -D # force removal
  # bt - branch track configures current branch to "track" same name from origin or specified remote
  bt    = "!f() { B=$(git symbolic-ref HEAD|cut -f3 -d/) && git config branch.$B.remote ${1:-origin} && git config branch.$B.merge refs/heads/$B; }; f"
  bmv   = branch -m
  cg    = config --global
  ceg   = config --global --edit
  clg   = config --global --list
  c     = config 
  cl    = config --list
  ce    = config --edit
  co    = checkout
  cob   = checkout -b
  com   = "!f() { git fetch; git checkout -b master origin/master; }; f"
  cot   = "!f() { git fetch; git checkout -b ${1##*/} $1; }; f " 
  #coe   = "!f() { git symbolic-ref HEAD refs/heads/${1:-empty}; rm .git/index; git clean -fdx; git commit --allow-empty -m 'empty, clean branch'; }; f"
  ca    = "!f() { git add $1; git ci -v $1; }; f"
  ci    = commit -e -C HEAD -v    --reset-author --untracked-files=no 
  cia   = commit -e -C HEAD -v -a --reset-author --untracked-files=no 
  ciab  = !B=$(git symbolic-ref HEAD 2>/dev/null) && git commit -v -a --edit -m "${B##refs/heads/}:" --untracked-files=no
  cii   = commit --interactive
  cid   = commit --amend -v
  cim   = commit -m
  cip   = commit -am '[...in progress...]' 
  cir   = reset HEAD^
  chp   = cherry-pick 
  d     = diff
  dc    = diff --cached
  do    = diff ORIG_HEAD..
  ds    = diff --stat=120,130 -M -C 
  dy    = diff --summary -M -C
  em    = "!${EDITOR:-vim} $(git ls-files --modified)"
  ea    = "!${EDITOR:-vim} $(git status --short --porcelain|cut -f2 -d' ')"
  gr    = grep --color --ignore-case -n
  k     = "!gitk &"
  l     = log
  ls    = log --stat=120,130
  lp    = log --patch
  lpw   = log --patch --word-diff
  ll    = log  --abbrev-commit --pretty=format:'%C(yellow)%h%Creset %s %Cgreen(%cr) %C(bold blue) %an %Creset%C(red)%d%Creset'
  l1    = !"git --no-pager ll -10; echo ''"
  lg    = !git ll --graph 
  lu    = log ORIG_HEAD.. --stat --no-merges
  lo    = !git ll ORIG_HEAD..
  po    = push origin HEAD
  poh   = push origin HEAD
  pu    = pull
  pr    = pull --rebase
  up    = pull --rebase
  r     = rebase
  ra    = rebase --abort
  rc    = rebase --continue
  ri    = rebase --interactive
  rih   = "!f() { git rebase -i HEAD$1; }; f "
  rst   = reset
  roh   = "! git --no-pager ll -10 ORIG_HEAD && read -p '^C to stop, anykey to continue' Z && git rst --hard ORIG_HEAD"
  st    = status --short --branch --untracked-files=no 
  sta   = status --short --branch --untracked-files=normal 
  sv    = svn
  svci  = svn dcommit --no-rebase
  svr   = svn rebase
  sy     = !git pull && git push
  sw    = update-index  --skip-worktree 
  nosw  = update-index --no-skip-worktree
  ta    = tag -a
  mt    = "! [ -f /Applications/MacVim.app/Contents/MacOS/Vim ] && git mergetool -t mvimdiff || git mergetool -t vimdiff"
  w     = "! echo \"$(git config user.name) <$(git config user.email)> \"" 
  me2   = "!f() { B=$(git symbolic-ref HEAD|cut -f3 -d/) && git checkout $1 && git merge $B; }; f "

; http://gitready.com/advanced/2011/10/21/ribbon-and-catchup-reading-new-commits.html
  ribbon = tag --force _ribbon origin/master
  catchup = log --patch --reverse --topo-order _ribbon..origin/master

#  ticket = "!f() { git checkout -b `echo $1|tr 'A-Z' 'a-z'` origin/master }; f "


# read from given uri
# push to writable one
# http://bit.ly/g9c9Y2

[url "http://github.com/"]
  insteadOf = "gh:"
[url "git@github.com:"]
  pushInsteadOf = "https://github.com/"
  pushInsteadOf = "http://github.com/"
  pushInsteadOf = "gh:"

[url "git@github.com:gmarik/"]
  pushInsteadOf = "gm:"
[url "http://github.com/gmarik/"]
  insteadOf = "gm:"

[url "https://gist.github.com/"]
  insteadOf = "gist:"
[url "git@gist.github.com:"]
  pushInsteadOf = "https://gist.github.com/"
  pushInsteadOf = "http://gist.github.com/"
  pushInsteadOf = "gist:"

[url "git@heroku.com:"]
  insteadOf = "heroku:"
