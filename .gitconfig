# vim: st=2:ts=2:et:ft=gitconfig

[core]

  excludesfile = ~/.gitignore-global
  quotepath = false
  commentChar = ?

  # see templatedir below
  # https://git-scm.com/docs/git-config#Documentation/git-config.txt-coresshCommand
  # sshCommand=~/bin/git-ssh

[init]
  templatedir = ~/.gitconfig.files/templates/

[commit]
  template = ~/.gitconfig.files/COMMIT_EDITMSG

[push]
  default = current

[color]
  branch = auto
  diff = auto
  status = auto
  grep = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
[color "status"]
  added = yellow
  changed = green
  untracked = cyan

[log]
  date = relative

; [apply]
;   whitespace = fix
;
[merge]
  tool = vimdiff
  guitool = p4merge

[mergetool]
  prompt = false
  tool = vimdiff
  guitool = p4merge

[mergetool "mvim"]
  cmd="/Applications/MacVim.app/Contents/MacOS/Vim -d -g -c 'wincmd J' $MERGED $LOCAL $BASE $REMOTE"
  keepbackup=false

[mergetool "p4merge"]
  cmd="/Applications/p4merge.app/Contents/MacOS/p4merge $BASE $LOCAL $REMOTE $MERGED"
  keepbackup=false
  keepTemporaries = false

[diff]
  tool = vimdiff
  guitool = p4merge

[difftool]
  prompt = false

[difftool "mvim"]
  # TODO: doesn't work
  cmd="~/Applications/MacVim.app/Contents/MacOS/Vim -d -g -c 'wincmd J' $LOCAL $REMOTE"

[difftool "p4merge"]
  cmd="~/Applications/p4merge.app/Contents/Resources/launchp4merge $LOCAL $REMOTE"
  keepTemporaries = false
  trustExitCode = false
  keepBackup = false
[format]
  #
[pretty]
  # ll=tformat:%C(bold yellow)%h%Creset %s %C(bold blue)[%an]%Creset %Cblue{%G?}%Creset %Cgreen(%cr)%Creset
  log = fuller
  ll  = format:%C(auto,yellow)%h%C(auto,reset) %s %C(auto,green)(%cr) %C(auto,bold blue) %an %C(auto,reset)%C(auto,red)%d%C(auto,reset)
  lh  = format:%C(red)%d%Creset %C(yellow)%h%Creset %Cgreen(%cr)%Creset %s %C(bold blue) %an %Creset

[alias]

  # Adding
  a     = add
  ae    = add --edit
  ai    = add --interactive
  ap    = add --patch
  au    = add --update

  # Branching
  b     = branch
  bls   = branch -v # list branches with last commit in

  brm   = branch -d # remove if branch-to-be-removed if fully merged into HEAD
  brmf  = branch -D # force removal
  # blsm = "!git checkout -q master && git for-each-ref refs/heads/ --format=%(refname:short) | while read branch; do mergeBase=$(git merge-base master $branch) && [[ $(git cherry master $(git commit-tree $(git rev-parse $branch^{tree}) -p $mergeBase -m _)) == "-"* ]] && echo $branch; done"

  # bt - branch track configures current branch to "track" same name from origin or specified remote
  bt    = "!f() { B=$(git symbolic-ref HEAD|cut -f3 -d/) && git config branch.$B.remote ${1:-origin} && git config branch.$B.merge refs/heads/$B; }; f"
  # rename branch
  bmv   = branch -m

  # Config
  cg    = config --global
  clg   = config --global --list
  c     = config
  cl    = config --list
  ce    = config --edit
  ceg   = config --global --edit

  # Checkout
  co    = checkout
  co-   = checkout -                                                                # previous one
  cob   = checkout -b                                                               # checkout into a new branch
  com   = "!f() { git fetch; git checkout -b master origin/master; }; f"            # checkout master branch
  cot   = "!f() { git fetch; git checkout -b ${1##*/} $1; }; f "                    #
  con   = "!f() { git fetch; git checkout -b $1 origin/master }; f "                # new branch off master

  # fzf checkout
  zco    = "!f() { git checkout $(git bls \"$@\"|grep -v '^*'|fzf|awk '{print $1}'); }; f"


  # Add and Commit
  ca    = "!f() { git add $1; git ci -v $1; }; f"

  # Commit
  # commit all using previous commit message as a template
  cia   = commit -a -e -C HEAD -v --reset-author --untracked-files=no

  # commit staged using prev commit message as a template
  ci    = commit -v --untracked-files=no

  # commit using branch name as an initial msg
  ciab  = !B=$(git symbolic-ref HEAD 2>/dev/null) && git commit -v -a --edit -m "${B##refs/heads/}:" --untracked-files=no

  # commit first
  cif   = "!git ci --allow-empty -t ~/.gitconfig.files/COMMIT_EDITMSG_START"

  cii   = commit --interactive

  # edit last commit's message
  cid   = commit --amend --reset-author -v
  cide  = commit --amend --reset-author -v --allow-empty
  cim   = commit -m
  cip   = commit -am 'WIP!'

  # change author of latest commit
  # assumes properly configured author to be now set in the local config
  ciu   ="!git commit --amend --author=\"`git config --get user.name` <`git config --get user.email`>\""

  chp   = cherry-pick

  ctags = "!.git/hooks/ctags"

  # Diff
  d     = diff
  ds    = diff --staged
  du    = diff @{upstream}
  dt    = diff --stat=120,130 -M -C
  dls   = diff --name-status -M -C

  # Edit files
  em    = "!${EDITOR:-vim} $(git ls-files --modified)"
  ea    = "!${EDITOR:-vim} $(git status --short --porcelain|cut -f2 -d' ')"

  # Grep
  g    = "!git --no-pager grep --color --ignore-case -n"

  # GitK
  k     = "!gitk &"

  # Log
  ll    = log --pretty=ll  --abbrev-commit                       # compact log
  l     = log --pretty=log
  lt    = log --pretty=log --name-status                         # terse log with filenames
  ls    = log --pretty=log --stat
  lp    = log --pretty=log --patch --color-moved -m -c           # show merges and compressed diff format
  lpw   = log --pretty=log --patch --color-moved --word-diff
  l1    = !"git --no-pager ll -10"
  lg    = !git ll --graph
  lu    = log @{upstream}.. --stat --no-merges
  llu    = !git ll @{upstream}..

  smartlog = log --all --graph --pretty=format:'commit: %C(bold red)%h%Creset %C(red)<%H>%Creset %C(bold magenta)%d           %Creset%ndate: %C(bold yellow)%cd %Creset%C(yellow)%cr%Creset%nauthor: %C(bold blue)%an%Creset                                  %C(blue)<%ae>%Creset%n%C(cyan)%s%n%Creset'
  sl = smartlog

  # Push
  po    = push --set-upstream origin HEAD

  # Pull
  pu    = pull
  pr    = pull --rebase

  # patch
  # outputs to stdout instead of a-file-file-commit. Handy for dumping commit log into a file
  fps   = format-patch --stdout

  # Rebase
  r     = rebase
  ra    = rebase --abort
  rc    = rebase --continue
  ri    = rebase --interactive
  ru    = rebase --onto @{upstream}

  # interactive rebase mostly for squashing/rearranging commits
  # operates on last 2 if not specified otherwise
  rih   = "!f() { git rebase -i HEAD~${1:-'2'}; }; f "

  # rebase up to the very first commit; special case
  riroot   = rebase --interactive --root

  # Reset
  # resets staged chages
  rst   = reset

  # resets last commit
  rstl   = reset HEAD^

  # select hunks to unstage|reset
  rstp   = reset --patch

  # reset to @{upstream} with confirmation
  roh   = "! git --no-pager ll -10 @{upstream} && read -p '^C to stop, anykey to continue' Z && git rst --hard @{upstream}"


  # Status
  # don't show untracked files
  st    = status --short --branch --untracked-files=no
  # show all
  sta   = status --short --branch --untracked-files=normal

  # Svn
  sv    = svn
  svci  = svn dcommit --no-rebase
  svr   = svn rebase

  # sync
  sy     = !git pull --rebase && git push

  sw    = update-index  --skip-worktree
  nosw  = update-index --no-skip-worktree

  ta    ="!f() { tn=$1; shift; git tag -a $tn -m $tn $@; }; f "

  # Merge Tool
  mt    = "! [ -d /Applications/p4merge.app ] && git mtt p4merge || [ -d /Applications/MacVim.app ] && git mtt mvimdiff || git mtt vimdiff"
  mtt   = mergetool -t

  # Show current `"user" <em@a.il>` configured
  w     = "! echo \"$(git config user.name) <$(git config user.email)> \""

  # me2 == "merge to" merge current branch to named one.
  # does 3 operations in one shot unless merge conflicts
  me2   = "!f() { git checkout $1 && git pull && git merge -; }; f "

  # codereview
  # http://gitready.com/advanced/2011/10/21/ribbon-and-catchup-reading-new-commits.html
  ribbon = tag --force _ribbon origin/master
  catchup = log --patch --reverse --topo-order _ribbon..origin/master

  sup = "!git ll --since=$([ $(date +%w) -eq 1 ] && date -v-3d +%F || date -v-1d +%F) --author=\"`git config user.name`\""

  #  ticket = "!f() { git checkout -b `echo $1|tr 'A-Z' 'a-z'` origin/master }; f "
  #
  # xargs
  # run command on modified files
  x = "!f() { git status --short --untracked-files=no | cut -d' ' -f3 | xargs $1; }; f"

  #
  # Branches
  #
  # List abandoned branches
  blsr = "!git for-each-ref refs/remotes/ --sort=authordate --format='%(color:cyan)%(authordate:format:%m/%d/%Y %I:%M %p)  %(align:25,left)%(color:yellow)%(authorname)%(end) %(color:reset)%(refname:strip=2) %(color:green)%(subject)%(color:reset)'"

  # List local branches that has been squash-merged upstream but not cleaned locally
  blss = "!git fetch && git for-each-ref refs/heads/ '--format=%(refname:short)' | while read branch; do mergeBase=$(git merge-base origin/master $branch) && [[ $(git cherry origin/master $(git commit-tree $(git rev-parse $branch^{tree}) -p $mergeBase -m _)) == "-"* ]] && echo $branch; done"
  blsss = "!git for-each-ref --sort=-committerdate refs/heads/ --format='%(HEAD) %(color:yellow) %(align:45,left) %(refname:short)%(color:reset) %(end) %(color:red)%(objectname:short)%(color:reset) %(contents:subject) %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))'"

  ## Hub
  hpr = "!hub pull-request --draft --browse"
  hbr = "!hub browse"
  h   = "!hub "
  hprco = "!hub pr checkout" # expects the number
  hprls = "!hub pr list"
  # checkout a github PR without hub
  # https://docs.github.com/en/github/collaborating-with-issues-and-pull-requests/checking-out-pull-requests-locally
  #hprco  = "!f() { local b=pull/$1; git fetch origin $b/head:$b; git checkout $b }; f"

  hpr = !gh pr create --draft
  hvi = !gh pr view

# read from given uri
# push to writable one
# http://bit.ly/g9c9Y2

[url "https://gist.github.com/"]
  insteadOf = "gist:"
[url "git@gist.github.com:"]
  pushInsteadOf = "https://gist.github.com/"
  pushInsteadOf = "http://gist.github.com/"
  pushInsteadOf = "gist:"

[url "git@heroku.com:"]
  insteadOf = "heroku:"

[url "git@github.com:gmarik/"]
  pushInsteadOf = "gm:"
  insteadOf = "gm:"

[url "https://github.com/gmarik/"]
  pushInsteadOf = "gm://"
  insteadOf = "gm://"


[url "git@bitbucket.org:gmarik/"]
  insteadOf = "bbm:"
  pushInsteadOf = "bbm:"
  insteadOf = "bbm://"
  pushInsteadOf = "bbm://"

[url "~/Dropbox/.gitrepos/"]
  insteadOf = "dx:"

[include]
  path = ~/.local/local.gitconfig
  path = ~/.local/private.gitconfig

# also see global config /Library/Developer/CommandLineTools/usr/share/git-core/gitconfig
# docs: https://git-scm.com/book/en/v2/Git-Tools-Credential-Storage
# debugging: https://stackoverflow.com/questions/54176758/how-do-you-debug-git-credential-helpers
# src: https://github.com/git/git/blob/7f4e64169352e03476b0ea64e7e2973669e491a2/contrib/credential/osxkeychain/git-credential-osxkeychain.c#L113
# https://stackoverflow.com/questions/53419660/how-to-add-credentials-from-the-command-line-using-git-credential-osxkeychain-s
# printf "protocol=https\nhost=github.com\nusername=$USER\npassword=$GITHUB_TOKEN\n" | git credential-osxkeychain store
# printf "protocol=https\nhost=github.com\n" | git credential-osxkeychain get
# [credential "https://github.com/workorg/*"]
# 	username = workuser
#   useHttpPath=true
#   helper=osxkeychain
