
# vim: set ft=sh ts=2 sw=2 et:

# TODO: fix on linux
# source /usr/local/etc/bash_completion.d/git-*.sh
# source /usr/local/etc/bash_completion.d/git-*.bash

source /opt/homebrew/etc/bash_completion.d/git-completion.bash
source /opt/homebrew/etc/bash_completion.d/git-prompt.sh

# to find current completion, run
# $ complete -p git
# complete -o bashdefault -o default -o nospace -F __git_wrap__git_main git
# then use it for custom completions
complete -o bashdefault -o default -o nospace -F __git_wrap__git_main G
alias G='git'

# automatically create aliases from git config
galias () {
  # TODO: optimize it
  local aliases=$(git config --global --get-regexp 'alias.*'|cut -f1 -d' '|cut -f2 -d'.')
  for a in ${aliases}; do 
    local _alias=${1:-:}${a}
    local cmd=`git config alias.$a|cut -f1 -d ' '`
    alias "$_alias"="git $a"
    complete -o default -o nospace -F _git_$cmd $_alias # allow git-completion to work with alias aswell
  done
}

# quick status stats over git repos, ie [1 M 1 D 59 ??]
# which is 1 Modified 1 Deleted and 59 (??) Untracked files
# use: _git_status_stats "%s"
# depends on `__gitdir` from "bash-completion" package
_git_status_stats() {
  if [ "$(type -t __gitdir)" == "function" -a -n "$(__gitdir)" ]; then
    local stats=$(git status --short|cut -c1-2|sort|uniq -c|awk '{print $2":"$1 }'|xargs)
    if [ -n "$stats" ]; then
      printf "$1" "$stats"
    fi
  fi
}



# http://gmarik.info/blog/2010/05/02/tracking-dotfiles-with-git

alias .G="git --work-tree=$HOME --git-dir=$HOME/dotfiles.git"
# complete -o default -o nospace -F _git .G # allow git-completion to work with alias aswell
complete -o bashdefault -o default -o nospace -F __git_wrap__git_main .G

# vim: ft=sh:ts=2
